// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int          @id @default(autoincrement())
  username           String
  email              String       @unique
  password           String
  veirfiedEmail      Boolean      @default(false)
  emailVerifiedToken String?
  emailVerifiedTime  DateTime?
  otp                String?
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt
  role               ROLETYPE
  userDetails        User_Detail?
  profileImage       String?
  userGig            Gig[]
  isProfileCompleted Boolean      @default(false)
  clientOrders       Order[]      @relation("ClientOrders")
  freelancerOrders   Order[]      @relation("FreelancerOrder")
  portfolio          Portfolio[]
}

model User_Detail {
  userId  Int        @id
  user    User       @relation(fields: [userId], references: [id])
  address String
  city    String
  state   String
  gender  GENDERTYPE
  bio     String
}

model Gig {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  title        String
  description  String
  price        Float
  CVImageOrPdf String?
  category     String?
  deliveryTime Int?
  order        Order[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Order {
  id           String      @id @default(uuid())
  clientId     Int
  freelancerId Int
  client       User        @relation(fields: [clientId], references: [id], name: "ClientOrders")
  freelancer   User        @relation(fields: [freelancerId], references: [id], name: "FreelancerOrder")
  gigId        Int
  gig          Gig         @relation(references: [id], fields: [gigId])
  status       ORDERSTATUS @default(PENDING)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Portfolio {
  id           Int      @id @default(autoincrement())
  freelancerId Int
  freelancer   User     @relation(fields: [freelancerId], references: [id])
  fileUrls     String?
  title        String
  descriptions String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum GENDERTYPE {
  FEMALE
  MALE
}

enum ROLETYPE {
  FREELANCER
  CLIENT
}

enum ORDERSTATUS {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}
